{
  "name": "codding-agent",
  "displayName": "CodingAgent",
  "description": "AI coding assistant using OpenAI API backend",
  "version": "0.1.0",
  "license": "MIT",
  "engines": {
    "vscode": "^1.103.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/SFENCE-SOFTWARE/VSCode/CodingAgent.git"
  },
  "categories": [
    "AI",
    "Other"
  ],
  "main": "./out/src/extension.js",
  "activationEvents": [
    "onView:codingagent-chat"
  ],
  "contributes": {
    "commands": [
      {
        "command": "codingagent.openChat",
        "title": "Open Chat",
        "category": "CodingAgent",
        "icon": "$(comment-discussion)"
      },
      {
        "command": "codingagent.refreshModels",
        "title": "Refresh Available Models",
        "category": "CodingAgent",
        "icon": "$(refresh)"
      },
      {
        "command": "codingagent.clearChat",
        "title": "Clear Chat History",
        "category": "CodingAgent",
        "icon": "$(trash)"
      },
      {
        "command": "codingagent.setMode",
        "title": "Set Agent Mode",
        "category": "CodingAgent",
        "icon": "$(gear)"
      },
      {
        "command": "codingagent.setModel",
        "title": "Set AI Model",
        "category": "CodingAgent",
        "icon": "$(robot)"
      },
      {
        "command": "codingagent.openSettings",
        "title": "Open Settings",
        "category": "CodingAgent",
        "icon": "$(settings-gear)"
      },
      {
        "command": "codingagent.openSettingsPanel",
        "title": "Open Settings Panel",
        "category": "CodingAgent",
        "icon": "$(gear)"
      },
      {
        "command": "codingagent.testInlineTracking",
        "title": "Test Inline Change Tracking",
        "category": "CodingAgent",
        "icon": "$(eye)"
      },
      {
        "command": "codingagent.showChanges",
        "title": "Show File Changes",
        "category": "CodingAgent",
        "icon": "$(diff)"
      },
      {
        "command": "codingagent.acceptAllChanges",
        "title": "Accept All Changes",
        "category": "CodingAgent",
        "icon": "$(check-all)"
      },
      {
        "command": "codingagent.rejectAllChanges",
        "title": "Reject All Changes",
        "category": "CodingAgent",
        "icon": "$(close-all)"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "codingagent",
          "title": "CodingAgent",
          "icon": "media/chat-icon.svg"
        }
      ]
    },
    "views": {
      "codingagent": [
        {
          "type": "webview",
          "id": "codingagent-chat-view",
          "name": "Chat",
          "icon": "$(comment-discussion)",
          "contextualTitle": "CodingAgent Chat"
        }
      ]
    },
    "menus": {
      "view/title": [
        {
          "command": "codingagent.refreshModels",
          "when": "view == codingagent-chat-view",
          "group": "navigation"
        },
        {
          "command": "codingagent.clearChat",
          "when": "view == codingagent-chat-view",
          "group": "navigation"
        }
      ],
      "commandPalette": [
        {
          "command": "codingagent.openChat"
        },
        {
          "command": "codingagent.refreshModels"
        },
        {
          "command": "codingagent.clearChat"
        },
        {
          "command": "codingagent.setMode"
        },
        {
          "command": "codingagent.setModel"
        },
        {
          "command": "codingagent.openSettings"
        },
        {
          "command": "codingagent.openSettingsPanel"
        }
      ]
    },
    "configuration": [
      {
        "title": "CodingAgent - Connection",
        "properties": {
          "codingagent.openai.host": {
            "type": "string",
            "default": "localhost",
            "description": "OpenAI API server host/IP address"
          },
          "codingagent.openai.port": {
            "type": "number",
            "default": 11434,
            "description": "OpenAI API server port"
          },
          "codingagent.openai.apiKey": {
            "type": "string",
            "default": "",
            "description": "OpenAI API key (leave empty for local models without authentication)"
          }
        }
      },
      {
        "title": "CodingAgent - Agent Settings",
        "properties": {
          "codingagent.currentMode": {
            "type": "string",
            "default": "Researcher",
            "enum": [
              "Coder",
              "Tester",
              "Reviewer",
              "Researcher",
              "Architect",
              "Plan Reviewer",
              "Approver",
              "Orchestrator"
            ],
            "description": "Current agent mode"
          },
          "codingagent.currentModel": {
            "type": "string",
            "default": "",
            "description": "Current OpenAI API model to use"
          },
          "codingagent.showThinking": {
            "type": "boolean",
            "default": true,
            "description": "Show model reasoning/thinking process"
          },
          "codingagent.enableStreaming": {
            "type": "boolean",
            "default": true,
            "description": "Enable streaming responses from the AI model"
          },
          "codingagent.iterationThreshold": {
            "type": "number",
            "default": 10,
            "minimum": 1,
            "maximum": 100,
            "description": "Number of tool iterations before asking user for continuation"
          },
          "codingagent.askUser.uncertaintyThreshold": {
            "type": "number",
            "default": 70,
            "minimum": 0,
            "maximum": 100,
            "description": "Uncertainty percentage threshold - AI will ask for user feedback when uncertainty is above this level"
          },
          "codingagent.memory.enableProjectMemory": {
            "type": "boolean",
            "default": true,
            "description": "Enable persistent project memory storage (stored in .codingagent/memory/)"
          }
        }
      },
      {
        "title": "CodingAgent - Advanced",
        "properties": {
          "codingagent.modes": {
            "type": "object",
            "default": {
              "Coder": {
                "systemMessage": "Reasoning: high\nYou are an expert programming assistant. When speaking with the user, clarify requirements, confirm acceptance criteria, and explain your proposed implementation before changing files.",
                "orchestrationMessage": "Reasoning: high\nYou are a specialized code implementer working under orchestration. Workflow:\n- Use plan_show to get plan context\n- Use plan_point_show to understand the implementation requirements, expected outputs, points, you should take in care and possible reviewer feedback\n- Read all relevant files to understand context, existing patterns, and dependencies.\n- Implement the required functionality exactly according to the acceptance criteria.\n- Write clean, well-documented code that follows existing style and conventions.\n- After implementation, mark the point as implemented using plan_point_implemented.\n- Provide a two-sentence summary for the Orchestrator describing the actions performed and the overall outcome.",
                "allowedTools": [
                  "read_file",
                  "write_file",
                  "list_files",
                  "get_file_size",
                  "execute_terminal",
                  "execute_python",
                  "create_folder",
                  "patch_file",
                  "modify_lines",
                  "rename_file",
                  "search_in_project",
                  "search_in_path",
                  "memory_store",
                  "memory_retrieve_by_lines",
                  "memory_retrieve_data",
                  "memory_delete",
                  "memory_search",
                  "memory_list",
                  "memory_export",
                  "plan_show",
                  "plan_point_show",
                  "plan_point_implemented"
                ],
                "fallbackMessage": "I'm ready to help with your coding tasks. What would you like me to do?",
                "temperature": 0.1,
                "description": "Expert coding assistant with file and terminal access",
                "llmDescription": "Expert programmer who can read, write, and modify files, execute terminal commands, and perform complex coding tasks. Can view specific plan points for context. Use for code generation, debugging, file operations, project setup, and any technical implementation work. Available tools: <tools>"
              },
              "Tester": {
                "systemMessage": "Reasoning: high\nYou are an expert software testing specialist. Ask the user what should be validated and what acceptance criteria or environments apply before creating or running tests.",
                "orchestrationMessage": "Reasoning: high\nYou are a specialized testing expert working under orchestration. Orchestration workflow:\n- Use plan_point_show to understand testing requirements and acceptance criteria\n- Design and run tests appropriate to the implementation\n- If tests pass: mark the point tested using plan_point_tested; if not, mark needing rework using plan_point_need_rework with details\n- Store concise test results and memory keys for artifacts\n- Provide a two-sentence summary for the Orchestrator describing the actions performed and the overall outcome.",
                "allowedTools": [
                  "read_file",
                  "write_file",
                  "list_files",
                  "get_file_size",
                  "execute_terminal",
                  "execute_python",
                  "create_folder",
                  "patch_file",
                  "modify_lines",
                  "rename_file",
                  "search_in_project",
                  "search_in_path",
                  "memory_store",
                  "memory_retrieve_by_lines",
                  "memory_retrieve_data",
                  "memory_delete",
                  "memory_search",
                  "memory_list",
                  "memory_export",
                  "plan_show",
                  "plan_point_show",
                  "plan_point_tested",
                  "plan_point_need_rework"
                ],
                "fallbackMessage": "I'm ready to help with testing tasks and validate implementations. What would you like me to test?",
                "temperature": 0.1,
                "description": "Software testing specialist who validates code quality and marks points as tested",
                "llmDescription": "Testing expert who validates code quality and marks plan points as tested after successful validation. Specializes in test creation, test automation, and comprehensive coverage analysis. Can mark points as tested or needing rework with detailed feedback. Available tools: <tools>"
              },
              "Reviewer": {
                "systemMessage": "Reasoning: high\nYou are an expert code reviewer. Ask the user which aspects to prioritize (security, style, performance) and provide clear, constructive feedback and actionable suggestions.",
                "orchestrationMessage": "Reasoning: high\nYou are a specialized code review expert working under orchestration. Orchestration workflow:\n- Use plan_point_show to get review context\n- Analyze implemented code for quality, security, and performance\n- If acceptable: mark as reviewed using plan_point_reviewed with concise comments; if not, mark as needing rework with targeted guidance\n- Store brief review notes or memory keys for other modes\n- Provide a two-sentence summary for the Orchestrator describing the actions performed and the overall outcome.",
                "allowedTools": [
                  "read_file",
                  "list_files",
                  "get_file_size",
                  "search_in_project",
                  "search_in_path",
                  "execute_python",
                  "memory_store",
                  "memory_retrieve_by_lines",
                  "memory_retrieve_data",
                  "memory_delete",
                  "memory_search",
                  "memory_list",
                  "memory_export",
                  "plan_show",
                  "plan_point_show",
                  "plan_point_reviewed",
                  "plan_point_need_rework"
                ],
                "fallbackMessage": "I'm ready to review your code and provide quality feedback. What code would you like me to review?",
                "temperature": 0.2,
                "description": "Code review specialist focused on implementation quality",
                "llmDescription": "Code review expert who analyzes implementation quality and marks plan points as reviewed with detailed comments. Focuses exclusively on code quality, security, and best practices within individual points. Available tools: <tools>"
              },
              "Artist": {
                "systemMessage": "Reasoning: high\nYou are a creative artist. When interacting with the user, ask about desired style, format, and constraints; confirm expected deliverables before producing creative content.",
                "orchestrationMessage": "Reasoning: high\nYou are a specialized creative expert working under orchestration. Orchestration workflow:\n- Use plan_point_show to understand creative requirements and expected outputs\n- Produce creative assets (stories, visual concepts, audio descriptions, etc.) that meet style and acceptance criteria\n- Store creative outputs in memory with clear keys for other modes (no file writing when plan specifies memory-only)\n- Mark the creative point implemented using plan_point_implemented\n- Provide a two-sentence summary for the Orchestrator describing the actions performed and the overall.",
                "allowedTools": [
                  "read_file",
                  "write_file",
                  "list_files",
                  "get_file_size",
                  "create_folder",
                  "patch_file",
                  "modify_lines",
                  "rename_file",
                  "search_in_project",
                  "search_in_path",
                  "execute_python",
                  "memory_store",
                  "memory_retrieve_by_lines",
                  "memory_retrieve_data",
                  "memory_delete",
                  "memory_search",
                  "memory_list",
                  "memory_export",
                  "plan_show",
                  "plan_point_show",
                  "plan_point_implemented"
                ],
                "fallbackMessage": "I'm ready to create imaginative content and artistic concepts. What creative work would you like me to develop?",
                "temperature": 0.8,
                "description": "Creative content generator for stories, visuals, and audio concepts",
                "llmDescription": "Creative specialist who generates imaginative content including stories, scenarios, visual concepts, textures, and sound descriptions. Provides detailed artistic specifications and creative vision for projects. Available tools: <tools>"
              },
              "Researcher": {
                "systemMessage": "Reasoning: high\nYou are an expert researcher. Ask the user what to research, the expected output format, and any constraints; confirm whether outputs should be stored in memory or saved to files.",
                "orchestrationMessage": "Reasoning: high\nYou are a specialized research expert working under orchestration. Orchestration workflow:\n- Use plan_point_show to understand research requirements and expected outputs\n- Gather information from files, web pages, and documents\n- Analyze collected data and synthesize key insights\n- Produce the required deliverable(s) and, if specified by the plan, store findings in memory only (no file writing)\n- Mark the research point implemented using plan_point_implemented\n- Provide a two-sentence summary for the Orchestrator describing the actions performed and the overall outcome.",
                "allowedTools": [
                  "read_file",
                  "list_files",
                  "get_file_size",
                  "read_webpage_as_html",
                  "read_webpage_as_markdown",
                  "read_pdf",
                  "search_in_project",
                  "search_in_path",
                  "execute_python",
                  "memory_store",
                  "memory_retrieve_by_lines",
                  "memory_retrieve_data",
                  "memory_delete",
                  "memory_search",
                  "memory_list",
                  "memory_export",
                  "plan_show",
                  "plan_point_show",
                  "plan_point_implemented"
                ],
                "fallbackMessage": "I'm here to conduct research and analysis. What information do you need me to gather and analyze?",
                "temperature": 0.3,
                "description": "Research specialist for information gathering and analysis with structured outputs",
                "llmDescription": "Research expert who gathers information from multiple sources and creates comprehensive outputs according to requirements. Specializes in thorough analysis and structured deliverables. Available tools: <tools>"
              },
              "Architect": {
                "systemMessage": "Reasoning: high\nYou are a software architect. When interacting with the user, clarify scope, constraints, and testability requirements; propose plan structure and acceptance criteria for review.",
                "orchestrationMessage": "Reasoning: high\nYou are a specialized planning expert working under orchestration. Always follow this workflow:\n- Use plan_show and plan_point_show to review existing plan structures\n- Create new plans or add/modify points as required\n- Ensure that points are in order for implementation\n- Ensure points have clear acceptance criteria, expected outputs and mark non-testable/research points appropriately\n- Ensure that select Coder, Artist or Researcher as implementer role\n- Specify that research outputs must store results to memory and include that in point expected_outputs\n- Store plan decisions and provide a two-sentence summary for the Orchestrator describing the actions performed and the overall outcome.",
                "allowedTools": [
                  "read_file",
                  "list_files",
                  "get_file_size",
                  "read_webpage_as_html",
                  "read_webpage_as_markdown",
                  "read_pdf",
                  "search_in_project",
                  "search_in_path",
                  "execute_python",
                  "memory_store",
                  "memory_retrieve_by_lines",
                  "memory_retrieve_data",
                  "memory_delete",
                  "memory_search",
                  "memory_list",
                  "memory_export",
                  "ask_user",
                  "plan_new",
                  "plan_list",
                  "plan_show",
                  "plan_point_show",
                  "plan_add_points",
                  "plan_change_point",
                  "plan_change",
                  "plan_point_remove",
                  "plan_set_architecture"
                ],
                "fallbackMessage": "I'm ready to create and refine implementation plans. What project needs detailed planning?",
                "temperature": 0.2,
                "description": "Plan creation specialist who designs implementation strategies",
                "llmDescription": "Planning specialist who creates and modifies implementation plans exclusively. Designs detailed plans with testability indicators but does NOT implement code. Available tools: <tools>"
              },
              "Plan Reviewer": {
                "systemMessage": "Reasoning: high\nYou are a plan structure reviewer. When interacting with the user, ask which plan to evaluate and which aspects (completeness, dependencies, granularity) to prioritize; provide clear, actionable findings.",
                "orchestrationMessage": "Reasoning: high\nYou are a specialized plan structure reviewer working under orchestration. Orchestration workflow:\n- Use plan_show and plan_point_show to examine the plan thoroughly\n- Analyze dependencies and care_on relationships for logical sequencing\n- Evaluate plan completeness, feasibility, and granularity\n- Identify missing dependencies or structural issues and propose fixes\n- If plan is sound: mark as reviewed using plan_reviewed with concise assessment; if not: mark as needing work using plan_need_works with concrete requirements\n- Provide a two-sentence summary for the Orchestrator describing actions performed and overall outcome. Suggest rework by Architect if needed.",
                "allowedTools": [
                  "read_file",
                  "list_files",
                  "get_file_size",
                  "search_in_project",
                  "search_in_path",
                  "execute_python",
                  "memory_store",
                  "memory_retrieve_by_lines",
                  "memory_retrieve_data",
                  "memory_delete",
                  "memory_search",
                  "memory_list",
                  "memory_export",
                  "plan_show",
                  "plan_point_show",
                  "plan_reviewed",
                  "plan_need_works"
                ],
                "fallbackMessage": "I'm ready to review plan structures and dependencies. What plan would you like me to evaluate?",
                "temperature": 0.2,
                "description": "Plan structure and dependency evaluation specialist",
                "llmDescription": "Plan structure expert who evaluates organization, dependencies, and quality. Marks plans as reviewed or needing structural improvements. Focuses exclusively on plan logic, not code implementation. Available tools: <tools>"
              },
              "Approver": {
                "systemMessage": "Reasoning: high\nYou are a final acceptance specialist. Ask the user which plan to evaluate and any specific acceptance criteria; explain the approval outcome clearly and what remains if not approved.",
                "orchestrationMessage": "Reasoning: high\nYou are a specialized final approval expert working under orchestration. Orchestration workflow:\n- Use plan_show to review the entire project scope and requirements\n- Examine completed work, testing results, and review comments\n- Verify that each point meets acceptance criteria and system integration goals\n- If project meets standards: use plan_accepted with comprehensive acceptance comment; if not: use plan_point_need_rework on specific points with detailed requirements\n- Store brief approval notes or memory keys for other modes\n- Provide a two-sentence summary for the Orchestrator describing the actions performed and the overall outcome.",
                "allowedTools": [
                  "read_file",
                  "list_files",
                  "get_file_size",
                  "search_in_project",
                  "search_in_path",
                  "execute_python",
                  "memory_store",
                  "memory_retrieve_by_lines",
                  "memory_retrieve_data",
                  "memory_delete",
                  "memory_search",
                  "memory_list",
                  "memory_export",
                  "plan_show",
                  "plan_point_show",
                  "plan_accepted",
                  "plan_point_need_rework"
                ],
                "fallbackMessage": "I'm ready to perform final acceptance review of completed work. What plan would you like me to evaluate for acceptance?",
                "temperature": 0.15,
                "description": "Final project approval and validation specialist",
                "llmDescription": "Final approval specialist who performs comprehensive validation of completed projects. Reviews all implementation, testing, and review comments to make final acceptance decisions. Can mark entire plans as accepted using plan_accepted with detailed acceptance comment, or reject specific points using plan_point_need_rework if acceptance criteria are not met. Has final authority on project approval and evaluates holistic project completion. Use for final quality validation, comprehensive acceptance reviews, and making final approval decisions. Available tools: <tools>"
              },
              "Orchestrator": {
                "systemMessage": "You should never be called with this system prompt. **DO NOTHING AND REPORT ERROR.**",
                "orchestrationMessage": "You are orchestration algorithm assistant.",
                "allowedTools": [
                  "execute_python",
                  "memory_store",
                  "memory_retrieve_by_lines",
                  "memory_retrieve_data",
                  "memory_delete",
                  "memory_search",
                  "memory_list",
                  "memory_export",
                  "ask_user",
                  "plan_list",
                  "plan_open",
                  "plan_show",
                  "plan_point_show",
                  "plan_point_need_rework",
                  "plan_point_comment",
                  "plan_state",
                  "plan_done",
                  "plan_delete"
                ],
                "fallbackMessage": "I'm ready to orchestrate tasks by delegating to specialized modes. What would you like me to coordinate?",
                "temperature": 0.15,
                "autoEvaluation": true,
                "description": "Task orchestrator that delegates work to specialized modes",
                "llmDescription": "Master project coordinator responsible for comprehensive execution oversight. Opens existing plans or delegates new plan creation to Architect. Ensures plans are reviewed before implementation. Decides implementation strategy and coordinates collaboration between modes. Delegates all specialized work to appropriate modes. Available tools: <tools>"
              }
            },
            "description": "Configuration for different agent modes"
          }
        }
      },
      {
        "title": "CodingAgent - Logging",
        "properties": {
          "codingagent.logging.enabled": {
            "type": "boolean",
            "default": false,
            "description": "Enable logging of AI communication"
          },
          "codingagent.logging.filePath": {
            "type": "string",
            "default": "",
            "description": "Path to log file (empty = workspace/.codingagent/logs)"
          },
          "codingagent.logging.verbosity": {
            "type": "string",
            "default": "Standard",
            "enum": [
              "Minimal",
              "Standard",
              "Verbose"
            ],
            "description": "Logging verbosity level"
          },
          "codingagent.logging.logMode": {
            "type": "boolean",
            "default": false,
            "description": "Enable raw JSON logging mode for OpenAI API communication"
          },
          "codingagent.logging.logModeFilePath": {
            "type": "string",
            "default": "",
            "description": "Path to raw JSON log file (empty = workspace/.codingagent/logs/openai-raw-json.log)"
          },
          "codingagent.logging.logModeIncludeTools": {
            "type": "boolean",
            "default": false,
            "description": "Include tools definitions in raw JSON logs (can make logs very large)"
          }
        }
      },
      {
        "title": "CodingAgent - Tools & Security",
        "properties": {
          "codingagent.tools.readFileMaxLines": {
            "type": "number",
            "default": 1000,
            "minimum": 10,
            "maximum": 10000,
            "description": "Maximum number of lines that read_file tool can read in one operation",
            "scope": "window"
          },
          "codingagent.tools.autoApproveCommands": {
            "type": "string",
            "default": "",
            "description": "Comma-separated list of terminal commands that are automatically approved without user confirmation (e.g. 'ls,pwd,git status'). Use with caution.",
            "scope": "window"
          },
          "codingagent.memory.maxLines": {
            "type": "number",
            "default": 100,
            "minimum": 10,
            "maximum": 1000,
            "description": "Maximum number of lines that memory_retrieve can read in one operation",
            "scope": "window"
          },
          "codingagent.memory.maxChars": {
            "type": "number",
            "default": 10000,
            "minimum": 1000,
            "maximum": 50000,
            "description": "Maximum number of characters that memory_retrieve can read in one operation",
            "scope": "window"
          },
          "codingagent.memory.autoSafetyLimit": {
            "type": "number",
            "default": 5000,
            "minimum": 1000,
            "maximum": 10000,
            "description": "Auto-applied safety limit for large values without explicit length (in characters)",
            "scope": "window"
          },
          "codingagent.memory.largeValueThreshold": {
            "type": "number",
            "default": 10000,
            "minimum": 5000,
            "maximum": 50000,
            "description": "Threshold above which values are considered 'large' and safety limits apply (in characters)",
            "scope": "window"
          }
        }
      },
      {
        "title": "CodingAgent - Plan",
        "properties": {
          "codingagent.plan.promptPlanRework": {
            "type": "string",
            "default": "Plan '<plan_name>' (ID: <plan_id>) needs rework based on review feedback. Please use plan tools to address the issues and update the plan accordingly. Original request: <plan_original_request>",
            "description": "Template instructing to rework the plan when plan.needsWork is true. Supports placeholders: <plan_id>, <plan_name>, <plan_short_description>, <plan_long_description>, <plan_original_request>, etc.",
            "scope": "window"
          },
          "codingagent.plan.promptPlanReview": {
            "type": "string",
            "default": "Please review plan '<plan_name>' (ID: <plan_id>). Description: <plan_long_description>. Use plan tools to review and mark as reviewed or needs work.",
            "description": "Template used when plan lacks a review. Supports placeholders: <plan_id>, <plan_name>, <plan_short_description>, <plan_long_description>, etc.",
            "scope": "window"
          },
          "codingagent.plan.promptPointsRework": {
            "type": "string",
            "default": "Plan points <failed_point_ids> in plan '<plan_name>' need rework. Please address the rework reasons and re-implement the points. Use plan_point_show to see details and plan_point_implemented when done.",
            "description": "Template for rework prompt. Supports placeholders: <failed_point_ids>, <plan_id>, <plan_name>, <point_*> for individual point details.",
            "scope": "window"
          },
          "codingagent.plan.promptPointsReview": {
            "type": "string",
            "default": "Plan points <failed_point_ids> in plan '<plan_name>' need code review. Please review point details using plan_point_show and mark as reviewed or needs rework. Point: <point_short_name>",
            "description": "Template for code review prompt. Supports placeholders: <failed_point_ids>, <plan_id>, <plan_name>, <point_*> for point details.",
            "scope": "window"
          },
          "codingagent.plan.promptPointsTesting": {
            "type": "string",
            "default": "Plan points <failed_point_ids> in plan '<plan_name>' need testing. Please test the implementation and mark as tested or needs rework. Testing instructions: <point_testing_instructions>",
            "description": "Template for testing prompt. Supports placeholders: <failed_point_ids>, <plan_id>, <plan_name>, <point_*> for point details.",
            "scope": "window"
          },
          "codingagent.plan.promptPointsImplementation": {
            "type": "string",
            "default": "Please implement plan points <failed_point_ids> in plan '<plan_name>'. Point details: <point_detailed_description>. Expected outputs: <point_expected_outputs>. Use plan_point_implemented when complete.",
            "description": "Template for implementation prompt. Supports placeholders: <failed_point_ids>, <plan_id>, <plan_name>, <point_*> for point details.",
            "scope": "window"
          },
          "codingagent.plan.promptPlanAcceptance": {
            "type": "string",
            "default": "Plan needs to be accepted. Ask Approver via call_under_mode to perform final acceptance check for the plan and mark plan as accepted via plan_accepted or use plan_point_need_rework on specific points if acceptance criteria are not met.",
            "description": "Template for acceptance prompt. Delegates to Approver mode via call_under_mode.",
            "scope": "window"
          },
          "codingagent.plan.promptPlanDone": {
            "type": "string",
            "default": "Plan is done. Nothing has to be done.",
            "description": "Template for done prompt.",
            "scope": "window"
          },
          "codingagent.plan.recommendedModePlanRework": {
            "type": "string",
            "default": "Architect",
            "description": "Recommended mode for plan rework tasks",
            "scope": "window"
          },
          "codingagent.plan.recommendedModePlanReview": {
            "type": "string", 
            "default": "Plan Reviewer",
            "description": "Recommended mode for plan review tasks",
            "scope": "window"
          },
          "codingagent.plan.recommendedModeRework": {
            "type": "string",
            "default": "", 
            "description": "Recommended mode for point rework tasks",
            "scope": "window"
          },
          "codingagent.plan.recommendedModeImplementation": {
            "type": "string",
            "default": "",
            "description": "Recommended mode for implementation tasks",
            "scope": "window"
          },
          "codingagent.plan.recommendedModeCodeReview": {
            "type": "string",
            "default": "Reviewer",
            "description": "Recommended mode for code review tasks", 
            "scope": "window"
          },
          "codingagent.plan.recommendedModeTesting": {
            "type": "string",
            "default": "Tester",
            "description": "Recommended mode for testing tasks",
            "scope": "window"
          },
          "codingagent.plan.recommendedModeAcceptance": {
            "type": "string",
            "default": "Approver",
            "description": "Recommended mode for plan acceptance tasks",
            "scope": "window"
          },
          "codingagent.plan.reviewChecklistForPoints": {
            "type": "string",
            "default": "* Check that point has clear acceptance criteria.\n* Verify point has expected outputs defined.\n* Ensure point has expected inputs specified.\n* Confirm point dependencies are properly set.",
            "description": "Checklist items applied to each plan point during review (one item per line, starting with '* ')",
            "scope": "window"
          },
          "codingagent.plan.reviewChecklistForPlan": {
            "type": "string",
            "default": "* Verify all points are logically ordered.\n* Check that plan has clear overall structure.\n* Confirm plan description matches the points.\n* Ensure plan is feasible and well-defined.",
            "description": "Checklist items applied to the plan as a whole during review (one item per line, starting with '* ')",
            "scope": "window"
          },
          "codingagent.plan.creation.promptDescriptionUpdate": {
            "type": "string",
            "default": "**Update Plan Descriptions**\n\nUse tool plan_change to update both the short and long description of active plan to reflect the user's request. Summarize what you did in two sentences.\n\n**User's Original Request:** <plan_original_request>\n\n**Instructions:**\n1. Create a clear, concise short description that summarizes what the plan will accomplish\n2. Create a comprehensive long description that includes all user requirements and technical details\n3. Ensure both descriptions are consistent and well-structured\n4. Use the plan_change tool to update both descriptions\n\n**Expected Output:** Updated plan with improved short and long descriptions.",
            "description": "Template for plan description update prompt. Placeholders: {originalRequest}, {shortDescription}, {longDescription}",
            "scope": "window"
          },
          "codingagent.plan.creation.checklistDescriptionReview": {
            "type": "string",
            "default": "* Is the short description an understandable summary of the long description, so that it is not necessary to read the long description to understand it?\n* Does the long description include all of the user's requirements?",
            "description": "Checklist for plan description review (one item per line, starting with '* ')",
            "scope": "window"
          },
          "codingagent.plan.creation.promptArchitectureCreation": {
            "type": "string",
            "default": "**PLAN CREATION STEP: Create Architecture Design**\n\nPlease create a comprehensive architectural design for this plan in JSON format.\n\n**Plan Information:**\n- Short Description: {shortDescription}\n- Long Description: {longDescription}\n- User Request: {originalRequest}\n\n**JSON Format Requirements:**\n```json\n{\n  \"components\": [\n    {\n      \"id\": \"unique-component-id\",\n      \"name\": \"Component Name\",\n      \"type\": \"service|database|api|frontend|backend|etc\",\n      \"description\": \"Component description\"\n    }\n  ],\n  \"connections\": [\n    {\n      \"from\": \"source-component-id\",\n      \"to\": \"target-component-id\",\n      \"type\": \"api|data|event|etc\",\n      \"description\": \"Connection description\"\n    }\n  ]\n}\n```\n\n**Instructions:**\n1. Design components that support all requirements from the long description\n2. Create logical connections between components\n3. Use descriptive IDs and names\n4. Include all necessary architectural elements\n5. Store the architecture using plan_set_architecture tool\n\n**Expected Output:** Complete JSON architecture stored in the plan.",
            "description": "Template for architecture creation prompt. Placeholders: {shortDescription}, {longDescription}, {originalRequest}",
            "scope": "window"
          },
          "codingagent.plan.creation.checklistArchitectureReview": {
            "type": "string",
            "default": "* Does the architecture design include all the required elements?\n* Is the architecture design technically correct and feasible?",
            "description": "Checklist for architecture review (one item per line, starting with '* ')",
            "scope": "window"
          },
          "codingagent.plan.creation.promptPlanPointsCreation": {
            "type": "string",
            "default": "**PLAN CREATION STEP: Create Implementation Points**\n\nPlease create detailed implementation points for this plan based on the architecture and requirements.\n\n**Plan Information:**\n- Long Description: {longDescription}\n- Architecture: {architecture}\n- User Request: {originalRequest}\n\n**Instructions:**\n1. Break down the implementation into logical, manageable points\n2. Each point should focus on a specific deliverable or component\n3. Include all necessary details for each point:\n   - Clear short name and description\n   - Detailed implementation instructions\n   - Review and testing instructions\n   - Expected inputs and outputs\n   - Dependencies on other points\n4. Order points based on logical dependencies\n5. Use plan_add_points tool to add all points\n\n**Quality Guidelines:**\n- Each point should be implementable by one specialist\n- Dependencies should be minimal and realistic\n- Instructions should be clear and testable\n- Points should align with the architecture\n\n**Expected Output:** Complete set of implementation points covering all requirements.",
            "description": "Template for plan points creation prompt. Placeholders: {longDescription}, {architecture}, {originalRequest}",
            "scope": "window"
          },
          "codingagent.plan.creation.promptCreationComplete": {
            "type": "string",
            "default": "**PLAN CREATION COMPLETED SUCCESSFULLY** ✅\n\nThe multi-step plan creation process has been completed successfully.\n\n**Plan Status:**\n- Plan ID: {planId}\n- Descriptions: ✅ Updated and reviewed\n- Architecture: ✅ Created and reviewed\n- Implementation Points: ✅ Created and validated\n- Total Points: {pointCount}\n\n**Next Steps:**\nThe plan is now ready for implementation. The orchestrator will begin the normal execution cycle to work through the implementation points systematically.\n\n**Original Request:** {originalRequest}",
            "description": "Template for plan creation completion message. Placeholders: {planId}, {pointCount}, {originalRequest}",
            "scope": "window"
          },
          "codingagent.plan.creation.recommendedModeDescriptionUpdate": {
            "type": "string",
            "default": "Architect",
            "description": "Recommended mode for plan description update step",
            "scope": "window"
          },
          "codingagent.plan.creation.recommendedModeDescriptionReview": {
            "type": "string", 
            "default": "Plan Reviewer",
            "description": "Recommended mode for plan description review step",
            "scope": "window"
          },
          "codingagent.plan.creation.recommendedModeArchitectureCreation": {
            "type": "string",
            "default": "Architect", 
            "description": "Recommended mode for architecture creation step",
            "scope": "window"
          },
          "codingagent.plan.creation.recommendedModeArchitectureReview": {
            "type": "string",
            "default": "Plan Reviewer",
            "description": "Recommended mode for architecture review step", 
            "scope": "window"
          },
          "codingagent.plan.creation.recommendedModePlanPointsCreation": {
            "type": "string",
            "default": "Architect",
            "description": "Recommended mode for plan points creation step",
            "scope": "window"
          }
        }
      },
      {
        "title": "CodingAgent - Algorithm",
        "properties": {
          "codingagent.algorithm.enabled": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            },
            "default": {
              "Orchestrator": true
            },
            "description": "Enable algorithm scripting for specific modes",
            "scope": "window"
          },
          "codingagent.algorithm.scriptPath": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {},
            "description": "Path to custom algorithm script for each mode (empty means use built-in)",
            "scope": "window"
          },
          "codingagent.algorithm.variables": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "default": {
              "Orchestrator": {
                "llmLanguages": "English"
              }
            },
            "description": "Key-value variables for algorithm scripts by mode",
            "scope": "window"
          }
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.10",
    "@types/node": "22.x",
    "@types/vscode": "^1.102.0",
    "@typescript-eslint/eslint-plugin": "^8.39.0",
    "@typescript-eslint/parser": "^8.39.0",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.5.2",
    "eslint": "^9.32.0",
    "typescript": "^5.9.2"
  },
  "dependencies": {
    "node-html-markdown": "^1.3.0"
  }
}
