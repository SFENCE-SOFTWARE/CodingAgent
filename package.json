{
  "name": "codding-agent",
  "displayName": "CodingAgent",
  "description": "AI coding assistant using OpenAI API backend",
  "version": "0.1.0",
  "license": "MIT",
  "engines": {
    "vscode": "^1.103.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/SFENCE-SOFTWARE/VSCode/CodingAgent.git"
  },
  "categories": [
    "AI",
    "Other"
  ],
  "main": "./out/src/extension.js",
  "activationEvents": [
    "onView:codingagent-chat"
  ],
  "contributes": {
    "commands": [
      {
        "command": "codingagent.openChat",
        "title": "Open Chat",
        "category": "CodingAgent",
        "icon": "$(comment-discussion)"
      },
      {
        "command": "codingagent.refreshModels",
        "title": "Refresh Available Models",
        "category": "CodingAgent",
        "icon": "$(refresh)"
      },
      {
        "command": "codingagent.clearChat",
        "title": "Clear Chat History",
        "category": "CodingAgent",
        "icon": "$(trash)"
      },
      {
        "command": "codingagent.setMode",
        "title": "Set Agent Mode",
        "category": "CodingAgent",
        "icon": "$(gear)"
      },
      {
        "command": "codingagent.setModel",
        "title": "Set AI Model",
        "category": "CodingAgent",
        "icon": "$(robot)"
      },
      {
        "command": "codingagent.openSettings",
        "title": "Open Settings",
        "category": "CodingAgent",
        "icon": "$(settings-gear)"
      },
      {
        "command": "codingagent.openSettingsPanel",
        "title": "Open Settings Panel",
        "category": "CodingAgent",
        "icon": "$(gear)"
      },
      {
        "command": "codingagent.testInlineTracking",
        "title": "Test Inline Change Tracking",
        "category": "CodingAgent",
        "icon": "$(eye)"
      },
      {
        "command": "codingagent.showChanges",
        "title": "Show File Changes",
        "category": "CodingAgent",
        "icon": "$(diff)"
      },
      {
        "command": "codingagent.acceptAllChanges",
        "title": "Accept All Changes",
        "category": "CodingAgent",
        "icon": "$(check-all)"
      },
      {
        "command": "codingagent.rejectAllChanges",
        "title": "Reject All Changes",
        "category": "CodingAgent",
        "icon": "$(close-all)"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "codingagent",
          "title": "CodingAgent",
          "icon": "media/chat-icon.svg"
        }
      ]
    },
    "views": {
      "codingagent": [
        {
          "type": "webview",
          "id": "codingagent-chat-view",
          "name": "Chat",
          "icon": "$(comment-discussion)",
          "contextualTitle": "CodingAgent Chat"
        }
      ]
    },
    "menus": {
      "view/title": [
        {
          "command": "codingagent.refreshModels",
          "when": "view == codingagent-chat-view",
          "group": "navigation"
        },
        {
          "command": "codingagent.clearChat",
          "when": "view == codingagent-chat-view",
          "group": "navigation"
        }
      ],
      "commandPalette": [
        {
          "command": "codingagent.openChat"
        },
        {
          "command": "codingagent.refreshModels"
        },
        {
          "command": "codingagent.clearChat"
        },
        {
          "command": "codingagent.setMode"
        },
        {
          "command": "codingagent.setModel"
        },
        {
          "command": "codingagent.openSettings"
        },
        {
          "command": "codingagent.openSettingsPanel"
        }
      ]
    },
    "configuration": [
      {
        "title": "CodingAgent - Connection",
        "properties": {
          "codingagent.openai.host": {
            "type": "string",
            "default": "localhost",
            "description": "OpenAI API server host/IP address"
          },
          "codingagent.openai.port": {
            "type": "number",
            "default": 11434,
            "description": "OpenAI API server port"
          },
          "codingagent.openai.apiKey": {
            "type": "string",
            "default": "",
            "description": "OpenAI API key (leave empty for local models without authentication)"
          }
        }
      },
      {
        "title": "CodingAgent - Agent Settings",
        "properties": {
          "codingagent.currentMode": {
            "type": "string",
            "default": "Ask",
            "enum": [
              "Coder",
              "Tester",
              "Reviewer",
              "Ask",
              "Architect",
              "Plan Reviewer",
              "Approver",
              "Orchestrator"
            ],
            "description": "Current agent mode"
          },
          "codingagent.currentModel": {
            "type": "string",
            "default": "",
            "description": "Current OpenAI API model to use"
          },
          "codingagent.showThinking": {
            "type": "boolean",
            "default": true,
            "description": "Show model reasoning/thinking process"
          },
          "codingagent.enableStreaming": {
            "type": "boolean",
            "default": true,
            "description": "Enable streaming responses from the AI model"
          },
          "codingagent.iterationThreshold": {
            "type": "number",
            "default": 10,
            "minimum": 1,
            "maximum": 100,
            "description": "Number of tool iterations before asking user for continuation"
          },
          "codingagent.askUser.uncertaintyThreshold": {
            "type": "number",
            "default": 70,
            "minimum": 0,
            "maximum": 100,
            "description": "Uncertainty percentage threshold - AI will ask for user feedback when uncertainty is above this level"
          },
          "codingagent.memory.enableProjectMemory": {
            "type": "boolean",
            "default": true,
            "description": "Enable persistent project memory storage (stored in .codingagent/memory/)"
          }
        }
      },
      {
        "title": "CodingAgent - Advanced",
        "properties": {
          "codingagent.modes": {
            "type": "object",
            "default": {
              "Coder": {
                "systemMessage": "Reasoning: high\nYou are an expert programming assistant specialized in code implementation and development. You write clean, efficient, and well-documented code while following best practices and project requirements. Focus exclusively on implementation tasks without testing or reviewing code.\n\nWorkflow:\n1. Read project files and understand requirements using read_file and search tools\n2. Implement features, fix bugs, or develop new functionality as requested\n3. Write clean, maintainable code following established patterns and conventions\n4. Create or modify files using write_file and modify_lines tools\n5. Mark implementation points as completed using plan_point_implemented\n6. Document code clearly with appropriate comments and documentation\n7. Focus on functionality and leave testing/review to specialized modes\n8. Share data with other modes using memory_store (inform them of keys for memory_retrieve access)",
                "allowedTools": [
                  "read_file",
                  "write_file",
                  "list_files",
                  "get_file_size",
                  "execute_terminal",
                  "create_folder",
                  "patch_file",
                  "modify_lines",
                  "rename_file",
                  "search_in_project",
                  "search_in_path",
                  "memory_store",
                  "memory_retrieve_by_lines",
                  "memory_retrieve_data",
                  "memory_delete",
                  "memory_search",
                  "memory_list",
                  "memory_export",
                  "plan_point_show",
                  "plan_point_implemented"
                ],
                "fallbackMessage": "I'm ready to help with your coding tasks. What would you like me to do?",
                "temperature": 0.1,
                "description": "Expert coding assistant with file and terminal access",
                "llmDescription": "Expert programmer who can read, write, and modify files, execute terminal commands, and perform complex coding tasks. Can view specific plan points for context. Use for code generation, debugging, file operations, project setup, and any technical implementation work. Available tools: <tools>"
              },
              "Tester": {
                "systemMessage": "Reasoning: high\nYou are an expert software testing specialist who creates comprehensive test suites, validates code quality, and ensures software reliability. You mark plan points as tested after successful validation or flag them for rework if issues are found.\n\nWorkflow:\n- Use plan_point_show to view specific plan points for testing context\n- Review implementations thoroughly and create appropriate tests\n- Execute tests and verify functionality meets acceptance criteria\n- Mark completed points as tested using plan_point_tested\n- Flag problematic points for rework using plan_point_need_rework with detailed feedback\n- Focus on test-driven development and comprehensive coverage\n- Share test results and data with other modes using memory_store (inform them of keys for access)",
                "allowedTools": [
                  "read_file",
                  "write_file",
                  "list_files",
                  "get_file_size",
                  "execute_terminal",
                  "create_folder",
                  "patch_file",
                  "modify_lines",
                  "rename_file",
                  "search_in_project",
                  "search_in_path",
                  "memory_store",
                  "memory_retrieve_by_lines",
                  "memory_retrieve_data",
                  "memory_delete",
                  "memory_search",
                  "memory_list",
                  "memory_export",
                  "plan_point_show",
                  "plan_point_tested",
                  "plan_point_need_rework"
                ],
                "fallbackMessage": "I'm ready to help with testing tasks and validate implementations. What would you like me to test?",
                "temperature": 0.1,
                "description": "Software testing specialist who validates code quality and marks points as tested",
                "llmDescription": "Testing expert who validates code quality and marks plan points as tested after successful validation. Specializes in test creation, test automation, and comprehensive coverage analysis. Can mark points as tested or needing rework with detailed feedback. Available tools: <tools>"
              },
              "Reviewer": {
                "systemMessage": "Reasoning: high\nYou are an expert code reviewer who analyzes implementation quality, identifies issues, and ensures adherence to best practices. You focus exclusively on code quality within individual plan points, not plan structures.\n\nWorkflow:\n- Use plan_point_show to view specific plan points for code review context\n- Thoroughly analyze implemented code for quality, security, and performance\n- Verify adherence to coding standards and best practices\n- Mark completed reviews using plan_point_reviewed with detailed comment\n- Flag problematic code for rework using plan_point_need_rework with specific feedback\n- Provide constructive improvement suggestions for code enhancement\n- Share review findings with other modes using memory_store (inform them of keys for access)",
                "allowedTools": [
                  "read_file",
                  "list_files",
                  "get_file_size",
                  "search_in_project",
                  "search_in_path",
                  "memory_store",
                  "memory_retrieve_by_lines",
                  "memory_retrieve_data",
                  "memory_delete",
                  "memory_search",
                  "memory_list",
                  "memory_export",
                  "plan_point_show",
                  "plan_point_reviewed",
                  "plan_point_need_rework"
                ],
                "fallbackMessage": "I'm ready to review your code and provide quality feedback. What code would you like me to review?",
                "temperature": 0.2,
                "description": "Code review specialist focused on implementation quality",
                "llmDescription": "Code review expert who analyzes implementation quality and marks plan points as reviewed with detailed comments. Focuses exclusively on code quality, security, and best practices within individual points. Available tools: <tools>"
              },
              "Artist": {
                "systemMessage": "Reasoning: high\nYou are a creative artist who generates imaginative content including stories, scenarios, sound descriptions, visual concepts, and textures. You bring creative vision to projects through detailed descriptions and conceptual designs.\n\nWorkflow:\n- Create compelling stories and narrative scenarios\n- Design detailed visual concepts and texture descriptions\n- Compose sound effects and audio landscape descriptions\n- Develop character concepts and world-building elements\n- Generate creative assets descriptions for implementation\n- Research creative references and inspiration materials\n- Store creative concepts in memory for future reference\n- Provide detailed specifications for visual and audio assets\n- Share creative assets with other modes using memory_store (inform them of keys for access)",
                "allowedTools": [
                  "read_file",
                  "write_file",
                  "list_files",
                  "get_file_size",
                  "create_folder",
                  "patch_file",
                  "modify_lines",
                  "rename_file",
                  "search_in_project",
                  "search_in_path",
                  "memory_store",
                  "memory_retrieve_by_lines",
                  "memory_retrieve_data",
                  "memory_delete",
                  "memory_search",
                  "memory_list",
                  "memory_export"
                ],
                "fallbackMessage": "I'm ready to create imaginative content and artistic concepts. What creative work would you like me to develop?",
                "temperature": 0.8,
                "description": "Creative content generator for stories, visuals, and audio concepts",
                "llmDescription": "Creative specialist who generates imaginative content including stories, scenarios, visual concepts, textures, and sound descriptions. Provides detailed artistic specifications and creative vision for projects. Available tools: <tools>"
              },
              "Ask": {
                "systemMessage": "Reasoning: high\nYou are a knowledgeable research assistant who answers questions clearly and gathers information from various sources. You provide helpful explanations, summaries, and analysis to support other team members.\n\nWorkflow:\n- Answer questions directly using your knowledge base\n- Use read_file to examine project files for context\n- Use read_webpage_as_html or read_webpage_as_markdown for web research\n- Use read_pdf for document analysis\n- Use search tools to find relevant information in the project\n- Store important findings in memory for future reference\n- Provide clear, concise answers with proper context and sources\n- Share research findings with other modes using memory_store (inform them of keys for access)",
                "allowedTools": [
                  "read_file",
                  "list_files",
                  "get_file_size",
                  "read_webpage_as_html",
                  "read_webpage_as_markdown",
                  "read_pdf",
                  "search_in_project",
                  "search_in_path",
                  "memory_store",
                  "memory_retrieve_by_lines",
                  "memory_retrieve_data",
                  "memory_delete",
                  "memory_search",
                  "memory_list",
                  "memory_export"
                ],
                "fallbackMessage": "I'm here to answer your questions. What would you like to know?",
                "temperature": 0.3,
                "description": "Research assistant for questions and information gathering",
                "llmDescription": "Research assistant who answers questions and gathers information from files, webpages, and documents. Provides clear explanations and analysis to support project work. Available tools: <tools>"
              },
              "Architect": {
                "systemMessage": "Reasoning: high\nYou are a software architect who creates detailed implementation plans exclusively. You design and modify plans but do NOT implement code or execute tasks - only plan them with clear testability indicators.\n\nWorkflow:\n- Use plan_show and plan_point_show to review existing plan structures\n- Create new plans using plan_new or add points to existing plans with plan_add_points\n- Modify existing points using plan_change_point for refinement\n- Mark points as \"NOT TESTABLE\" for documentation, design decisions, or research tasks\n- Ensure testable points have clear acceptance criteria and testable outcomes\n- Focus on well-structured plans with proper dependencies and detailed descriptions\n- Share architectural decisions with other modes using memory_store (inform them of keys for access)",
                "allowedTools": [
                  "read_file",
                  "list_files",
                  "get_file_size",
                  "read_webpage_as_html",
                  "read_webpage_as_markdown",
                  "read_pdf",
                  "search_in_project",
                  "search_in_path",
                  "memory_store",
                  "memory_retrieve_by_lines",
                  "memory_retrieve_data",
                  "memory_delete",
                  "memory_search",
                  "memory_list",
                  "memory_export",
                  "ask_user",
                  "plan_new",
                  "plan_list",
                  "plan_show",
                  "plan_point_show",
                  "plan_add_points",
                  "plan_change_point",
                  "plan_point_care_on",
                  "plan_point_remove"
                ],
                "fallbackMessage": "I'm ready to create and refine implementation plans. What project needs detailed planning?",
                "temperature": 0.2,
                "description": "Plan creation specialist who designs implementation strategies",
                "llmDescription": "Planning specialist who creates and modifies implementation plans exclusively. Designs detailed plans with testability indicators but does NOT implement code. Available tools: <tools>"
              },
              "Plan Reviewer": {
                "systemMessage": "Reasoning: high\nYou are a specialized plan review expert who evaluates plan structures, dependencies, and overall quality. You focus exclusively on plan organization and logical flow, not code implementation quality.\n\nWorkflow:\n- Use plan_show and plan_point_show to examine plan structure and dependencies\n- Analyze care_on relationships between points for logical sequencing\n- Evaluate plan completeness, feasibility, and proper granularity\n- Check for missing dependencies that could cause implementation issues\n- Mark sound plans as reviewed using plan_reviewed with detailed assessment\n- Flag problematic plans for improvement using plan_need_works with specific requirements\n- Suggest better dependency relationships and point ordering optimization\n- Share plan analysis with other modes using memory_store (inform them of keys for access)",
                "allowedTools": [
                  "read_file",
                  "list_files",
                  "get_file_size",
                  "search_in_project",
                  "search_in_path",
                  "memory_store",
                  "memory_retrieve_by_lines",
                  "memory_retrieve_data",
                  "memory_delete",
                  "memory_search",
                  "memory_list",
                  "memory_export",
                  "plan_show",
                  "plan_point_show",
                  "plan_reviewed",
                  "plan_need_works"
                ],
                "fallbackMessage": "I'm ready to review plan structures and dependencies. What plan would you like me to evaluate?",
                "temperature": 0.2,
                "description": "Plan structure and dependency evaluation specialist",
                "llmDescription": "Plan structure expert who evaluates organization, dependencies, and quality. Marks plans as reviewed or needing structural improvements. Focuses exclusively on plan logic, not code implementation. Available tools: <tools>"
              },
              "Approver": {
                "systemMessage": "Reasoning: high\nYou are a final acceptance specialist responsible for comprehensive project validation and approval. You perform the final quality assessment before project completion, ensuring all requirements are met and work is production-ready. Your approval is the last step in the project lifecycle.\n\nWorkflow:\n1. Review the entire plan using plan_show to understand project scope and requirements\n2. Examine all completed work including implementation, testing results, and review comments\n3. Verify that each point meets its acceptance criteria and overall project goals\n4. Check integration between different components and overall system coherence\n5. If everything meets standards: Use plan_accepted with comprehensive acceptance comment\n6. If work is insufficient: Use plan_point_need_rework on specific points with detailed improvement requirements\n7. Focus on holistic quality, not just individual components - you have authority to reject even tested and reviewed work if it doesn't meet project standards\n8. Share approval decisions with other modes using memory_store (inform them of keys for access)",
                "allowedTools": [
                  "read_file",
                  "list_files",
                  "get_file_size",
                  "search_in_project",
                  "search_in_path",
                  "memory_store",
                  "memory_retrieve_by_lines",
                  "memory_retrieve_data",
                  "memory_delete",
                  "memory_search",
                  "memory_list",
                  "memory_export",
                  "plan_show",
                  "plan_point_show",
                  "plan_accepted",
                  "plan_point_need_rework"
                ],
                "fallbackMessage": "I'm ready to perform final acceptance review of completed work. What plan would you like me to evaluate for acceptance?",
                "temperature": 0.15,
                "description": "Final project approval and validation specialist",
                "llmDescription": "Final approval specialist who performs comprehensive validation of completed projects. Reviews all implementation, testing, and review comments to make final acceptance decisions. Can mark entire plans as accepted using plan_accepted with detailed acceptance comment, or reject specific points using plan_point_need_rework if acceptance criteria are not met. Has final authority on project approval and evaluates holistic project completion. Use for final quality validation, comprehensive acceptance reviews, and making final approval decisions. Available tools: <tools>"
              },
              "Orchestrator": {
                "systemMessage": "Reasoning: high\nYou are an AI project orchestrator. Your role is coordination: ensure a plan exists, then drive its completion by repeatedly asking the plan evaluator and following its guidance. Do not perform independent implementation, review, or testing work.\n\nWorkflow:\n1. Open or ensure a plan exists (use plan_open). If none exists, request Architect to create one.\n2. Call the tool 'plan_evaluate' for the plan.\n3. Inspect the evaluation result and **select only the highest-priority unresolved point** (normally the first in the list) to act on. Do not delegate or process multiple points at once unless explicitly instructed by the evaluation result.\n4. Perform only the actions specified for that single point (for example: delegate tasks via call_under_mode, request reviews, mark points as needing rework, add comments, or change plan state).\n5. After completing actions for that point, return to step 2 to re-evaluate the updated plan.\n6. Repeat until 'plan_evaluate' reports the plan is complete.\n7. When complete, mark the plan done (plan_done) and provide a concise final status.\n\nKeep responses concise and use tool calls to make changes or delegate work.\n\nData Coordination: Share project coordination data with modes using memory_store (inform them of keys for access)\n\nRemember: You coordinate and delegate - specialized modes perform the actual work.",
                "allowedTools": [
                  "call_under_mode",
                  "memory_store",
                  "memory_retrieve_by_lines",
                  "memory_retrieve_data",
                  "memory_delete",
                  "memory_search",
                  "memory_list",
                  "memory_export",
                  "ask_user",
                  "plan_list",
                  "plan_open",
                  "plan_show",
                  "plan_point_show",
                  "plan_point_need_rework",
                  "plan_point_comment",
                  "plan_state",
                  "plan_done",
                  "plan_evaluate",
                  "plan_delete"
                ],
                "fallbackMessage": "I'm ready to orchestrate tasks by delegating to specialized modes. What would you like me to coordinate?",
                "temperature": 0.15,
                "autoEvaluation": true,
                "description": "Task orchestrator that delegates work to specialized modes",
                "llmDescription": "Master project coordinator responsible for comprehensive execution oversight. Opens existing plans or delegates new plan creation to Architect. Ensures plans are reviewed before implementation. Decides implementation strategy and coordinates collaboration between modes. Delegates all specialized work to appropriate modes. Available tools: <tools>"
              }
            },
            "description": "Configuration for different agent modes"
          }
        }
      },
      {
        "title": "CodingAgent - Logging",
        "properties": {
          "codingagent.logging.enabled": {
            "type": "boolean",
            "default": false,
            "description": "Enable logging of AI communication"
          },
          "codingagent.logging.filePath": {
            "type": "string",
            "default": "",
            "description": "Path to log file (empty = workspace/.codingagent/logs)"
          },
          "codingagent.logging.verbosity": {
            "type": "string",
            "default": "Standard",
            "enum": [
              "Minimal",
              "Standard",
              "Verbose"
            ],
            "description": "Logging verbosity level"
          },
          "codingagent.logging.logMode": {
            "type": "boolean",
            "default": false,
            "description": "Enable raw JSON logging mode for OpenAI API communication"
          },
          "codingagent.logging.logModeFilePath": {
            "type": "string",
            "default": "",
            "description": "Path to raw JSON log file (empty = workspace/.codingagent/logs/openai-raw-json.log)"
          }
        }
      },
      {
        "title": "CodingAgent - Tools & Security",
        "properties": {
          "codingagent.tools.readFileMaxLines": {
            "type": "number",
            "default": 1000,
            "minimum": 10,
            "maximum": 10000,
            "description": "Maximum number of lines that read_file tool can read in one operation",
            "scope": "window"
          },
          "codingagent.tools.autoApproveCommands": {
            "type": "string",
            "default": "",
            "description": "Comma-separated list of terminal commands that are automatically approved without user confirmation (e.g. 'ls,pwd,git status'). Use with caution.",
            "scope": "window"
          },
          "codingagent.memory.maxLines": {
            "type": "number",
            "default": 100,
            "minimum": 10,
            "maximum": 1000,
            "description": "Maximum number of lines that memory_retrieve can read in one operation",
            "scope": "window"
          },
          "codingagent.memory.maxChars": {
            "type": "number",
            "default": 10000,
            "minimum": 1000,
            "maximum": 50000,
            "description": "Maximum number of characters that memory_retrieve can read in one operation",
            "scope": "window"
          },
          "codingagent.memory.autoSafetyLimit": {
            "type": "number",
            "default": 5000,
            "minimum": 1000,
            "maximum": 10000,
            "description": "Auto-applied safety limit for large values without explicit length (in characters)",
            "scope": "window"
          },
          "codingagent.memory.largeValueThreshold": {
            "type": "number",
            "default": 10000,
            "minimum": 5000,
            "maximum": 50000,
            "description": "Threshold above which values are considered 'large' and safety limits apply (in characters)",
            "scope": "window"
          }
        }
      },
      {
        "title": "CodingAgent - Plan",
        "properties": {
          "codingagent.plan.autoEvaluationEnabled": {
            "type": "boolean",
            "default": true,
            "description": "Enable automatic plan evaluation after LLM responses (not from call_under_mode)",
            "scope": "window"
          },
          "codingagent.plan.autoEvaluationModes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": ["Orchestrator"],
            "description": "List of modes for which automatic plan evaluation is enabled",
            "scope": "window"
          },
          "codingagent.plan.promptPlanRework": {
            "type": "string",
            "default": "Use call_under_mode to delegate to Architect: \"Revise the plan because: <reason>\"",
            "description": "Template instructing Architect to rework the plan via call_under_mode. Use <reason> placeholder.",
            "scope": "window"
          },
          "codingagent.plan.promptPlanReview": {
            "type": "string",
            "default": "Use call_under_mode to delegate to Plan Reviewer: \"Review the current plan for quality and completeness\"",
            "description": "Template used when plan lacks a review; delegates to Plan Reviewer via call_under_mode.",
            "scope": "window"
          },
          "codingagent.plan.promptPointsRework": {
            "type": "string",
            "default": "Use call_under_mode to delegate rework of plan points <ids> to appropriate mode based on point requirements",
            "description": "Template for rework prompt. Use <ids> placeholder for comma-separated plan point IDs.",
            "scope": "window"
          },
          "codingagent.plan.promptPointsImplementation": {
            "type": "string",
            "default": "Use call_under_mode to delegate to Coder: \"Implement plan points <ids>\"",
            "description": "Template for implementation prompt. Delegates to Coder mode via call_under_mode. Use <ids> placeholder.",
            "scope": "window"
          },
          "codingagent.plan.promptPointsReview": {
            "type": "string",
            "default": "Use call_under_mode to delegate to Reviewer: \"Review implementation of plan points <ids>\"",
            "description": "Template for code review prompt. Delegates to Reviewer mode via call_under_mode. Use <ids> placeholder.",
            "scope": "window"
          },
          "codingagent.plan.promptPointsTesting": {
            "type": "string",
            "default": "Use call_under_mode to delegate to Tester: \"Test implementation of plan points <ids>\"",
            "description": "Template for testing prompt. Delegates to Tester mode via call_under_mode. Use <ids> placeholder.",
            "scope": "window"
          },
          "codingagent.plan.promptPlanAcceptance": {
            "type": "string",
            "default": "Use call_under_mode to delegate to Approver: \"Perform final acceptance check for the plan\"",
            "description": "Template for acceptance prompt. Delegates to Approver mode via call_under_mode.",
            "scope": "window"
          }
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.10",
    "@types/node": "22.x",
    "@types/vscode": "^1.102.0",
    "@typescript-eslint/eslint-plugin": "^8.39.0",
    "@typescript-eslint/parser": "^8.39.0",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.5.2",
    "eslint": "^9.32.0",
    "typescript": "^5.9.2"
  },
  "dependencies": {
    "node-html-markdown": "^1.3.0"
  }
}
